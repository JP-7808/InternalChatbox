@{
    ViewData["Title"] = "Chat";
    var currentUserId = ViewBag.CurrentUserId;
    var users = ViewBag.Users as List<InternalChatbox.Models.User>;
    var groups = ViewBag.Groups as List<InternalChatbox.Models.ChatGroup>;
}

<div class="create-group">
    <h4>Create New Group</h4>
    <form id="createGroupForm">
        <input type="text" name="GroupName" placeholder="Group Name" required />

        <select multiple name="UserIds" id="userSelect">
            @foreach (var user in ViewBag.Users)
            {
                <option value="@user.Id">@user.Name</option>
            }
        </select>

        <button type="submit">Create Group</button>
    </form>
</div>





<h2>Welcome, @ViewBag.UserName!</h2>
<p>Your role is: <strong>@ViewBag.UserRole</strong></p>

<p>This is your dashboard. From here, you'll access chat, profile, and team communications.</p>

<a class="btn btn-danger" href="/Account/Logout">Logout</a>
<a class="btn btn-info" href="/Account/Profile">My Profile</a>

<div class="row">
    <!-- Sidebar -->
    <div class="col-4 border-end" style="height: 80vh; overflow-y: auto;">
        <h4>Chats</h4>
        <input id="searchBox" class="form-control mb-2" placeholder="Search..." />

        <h5>Users</h5>
        <ul class="list-group">
            @foreach (var user in users)
            {
                <li class="list-group-item user-chat" data-id="@user.Id">@user.Name (@user.Designation)</li>
            }
        </ul>

        // In Index.cshtml, modify the group list rendering
        <!-- In Index.cshtml -->
        <h5 class="mt-3">Groups</h5>
        <ul class="list-group">
            @foreach (var group in groups)
            {
                // Get the current user's membership in this group
                var userMembership = group.Members?.FirstOrDefault(m => m.UserId == currentUserId);
                var isAdmin = userMembership?.IsAdmin ?? false;

                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span class="group-chat" style="cursor:pointer;" data-id="@group.Id">@group.GroupName</span>
                    @if (isAdmin)
                    {
                        <span>
                            <a href="/Chat/EditGroup/@group.Id" class="btn btn-sm btn-outline-primary">Edit</a>
                            <button class="btn btn-sm btn-outline-danger delete-group" data-id="@group.Id">Delete</button>
                        </span>
                    }
                </li>
            }
        </ul>

    </div>

    <!-- Chat Window -->
    <div class="col-8" style="height: 80vh;">
        <div id="chatBox" style="height: 90%; overflow-y: auto;" class="border p-3 mb-2 bg-light"></div>
        <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." />
        <button id="sendBtn" class="btn btn-primary mt-2">Send</button>
    </div>
</div>

<div class="modal fade" id="createGroupModal" tabindex="-1" aria-labelledby="createGroupModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <form id="createGroupForm">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Group</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <label>Group Name</label>
                    <input type="text" class="form-control mb-2" name="GroupName" required />

                    <label>Select Users</label>
                    <div class="form-check">
                        @foreach (var user in users)
                        {
                            <div>
                                <input type="checkbox" class="form-check-input" name="UserIds" value="@user.Id" />
                                <label class="form-check-label">@user.Name (@user.Designation)</label>
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>



@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        const currentUserId = parseInt('@currentUserId');
        let receiverId = null;
        let groupId = null;
        let currentChatType = null; // 'private' or 'group'

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        // Start connection
        connection.start().then(() => {
            console.log("SignalR connected");
        }).catch(err => {
            console.error("SignalR connection error: ", err);
        });

        // Message handlers
        connection.on("ReceivePrivateMessage", function (senderId, senderName, message) {
            // Only show if this is the current chat window for this sender
            if (currentChatType === 'private' && receiverId == senderId) {
                appendMessage(senderName, message, senderId);
            }
        });

        connection.on("ReceiveGroupMessage", function (groupIdReceived, senderId, senderName, message) {
            // Only show if this is the current group chat window
            if (currentChatType === 'group' && groupId == groupIdReceived) {
                appendMessage(senderName, message, senderId);
            }
        });

        // Improved message display function
        function appendMessage(senderName, message, senderId) {
            const messageId = 'msg-' + Date.now(); // Temporary ID until we get the real one from DB
            const messageHtml = `
                <div id="${messageId}" class="message-container">
                    <b>${senderName}:</b> ${message}
                    ${senderId == currentUserId ?
                        `<button class="btn btn-sm btn-outline-danger delete-message"
                         data-id="${messageId}" title="Delete message">×</button>` : ''}
                </div>`;

            $('#chatBox').append(messageHtml);
            $('#chatBox').scrollTop($('#chatBox')[0].scrollHeight);
        }

        // Chat selection handlers
        $('.user-chat').click(function () {
            receiverId = parseInt($(this).data('id'));
            groupId = null;
            currentChatType = 'private';
            loadMessages(currentUserId, receiverId, null);
        });

        $('.group-chat').click(function () {
            groupId = $(this).data('id');
            receiverId = null;
            currentChatType = 'group';
            connection.invoke("JoinGroup", groupId.toString());
            loadMessages(currentUserId, null, groupId);
        });

        // Send message handler
        $('#sendBtn').click(function () {
            const message = $('#messageInput').val().trim();
            if (!message) return;

            $('#messageInput').val('');

            if (receiverId) {
                // Private message
                connection.invoke("SendPrivateMessage",
                    currentUserId,
                    receiverId,
                    message,
                    '@ViewBag.UserName')
                .then(() => {
                    // Message sent via SignalR, now save to DB
                    saveMessageToDb(currentUserId, receiverId, null, message);
                });
            } else if (groupId) {
                // Group message
                connection.invoke("SendGroupMessage",
                    groupId.toString(),
                    currentUserId,
                    message,
                    '@ViewBag.UserName')
                .then(() => {
                    // Message sent via SignalR, now save to DB
                    saveMessageToDb(currentUserId, null, groupId, message);
                });
            }
        });

        // Save message to database
        function saveMessageToDb(senderId, receiverId, groupId, message) {
            $.post("/Chat/SendMessage", {
                SenderId: senderId,
                ReceiverId: receiverId,
                GroupId: groupId,
                MessageText: message
            }).done(function(data) {
                // Update the temporary message ID with the real one from DB
                if (data.messageId) {
                    const lastMessage = $('#chatBox .message-container').last();
                    lastMessage.attr('id', 'message-' + data.messageId);
                    lastMessage.find('.delete-message').attr('data-id', data.messageId);
                }
            });
        }

        // Load messages with delete buttons
        function loadMessages(senderId, receiverId, groupId) {
            $('#chatBox').html('<div class="text-center py-3">Loading messages...</div>');

            $.get(`/Chat/GetMessages?senderId=${senderId}&receiverId=${receiverId}&groupId=${groupId}`, function (data) {
                $('#chatBox').html('');
                if (data.length === 0) {
                    $('#chatBox').html('<div class="text-center py-3">No messages yet</div>');
                } else {
                    data.forEach(msg => {
                        $('#chatBox').append(`
                            <div id="message-${msg.messageId}" class="message-container">
                                <b>${msg.senderName}:</b> ${msg.messageText}
                                ${msg.senderId == currentUserId ?
                                    `<button class="btn btn-sm btn-outline-danger delete-message"
                                     data-id="${msg.messageId}" title="Delete message">×</button>` : ''}
                            </div>`);
                    });
                    $('#chatBox').scrollTop($('#chatBox')[0].scrollHeight);
                }
            });
        }

        // Message deletion handler
        $(document).on('click', '.delete-message', function() {
            const messageId = $(this).data('id');
            if (confirm("Are you sure you want to delete this message?")) {
                $.post('/Chat/DeleteMessage', { messageId: messageId }, function() {
                    $(`#message-${messageId}`).remove();
                });
            }
        });

        // Rest of your existing scripts (group creation, etc.)...
    </script>

    <script>
         $('#createGroupForm').submit(function (e) {
            e.preventDefault();

            const formData = $(this).serialize();

            $.post("/Chat/CreateGroup", formData, function () {
                location.reload(); // refresh to show new group
            });
        });

    </script>

    <script>
        // Edit group name
        $(document).on('click', '.edit-group', function () {
            const groupId = $(this).data('id');
            const oldName = $(this).data('name');
            const newName = prompt("Enter new group name:", oldName);
            if (newName) {
                $.post('/Chat/UpdateGroup', { groupId: groupId, newGroupName: newName }, function () {
                    location.reload();
                });
            }
        });

        // Delete group
        $(document).on('click', '.delete-group', function () {
            const groupId = $(this).data('id');
            if (confirm("Are you sure you want to delete this group?")) {
                $.post('/Chat/DeleteGroup', { groupId: groupId }, function () {
                    location.reload();
                });
            }
        });
    </script>


    <script>
        document.getElementById("createGroupForm").addEventListener("submit", async function (e) {
            e.preventDefault();

            const formData = new FormData(this);
            const GroupName = formData.get("GroupName");
            const selectedOptions = document.getElementById("userSelect").selectedOptions;
            const UserIds = Array.from(selectedOptions).map(option => parseInt(option.value));

            const response = await fetch("/Chat/CreateGroup", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({ GroupName, UserIds })
            });

            if (response.ok) {
                alert("Group created successfully!");
                location.reload(); // refresh to show new group
            } else {
                alert("Error creating group.");
            }
        });
    </script>

    <script>
                // Add this to your existing scripts in Index.cshtml

        // Function to add delete button to messages
        function addDeleteButtons(messages) {
            messages.forEach(msg => {
                if (msg.senderId == currentUserId) {
                    $(`#message-${msg.messageId}`).append(
                        `<button class="btn btn-sm btn-outline-danger delete-message"
                         data-id="${msg.messageId}" title="Delete message">×</button>`
                    );
                }
            });
        }

        // Handle message deletion
        $(document).on('click', '.delete-message', function() {
            const messageId = $(this).data('id');
            if (confirm("Are you sure you want to delete this message?")) {
                $.post('/Chat/DeleteMessage', { messageId: messageId }, function() {
                    // Remove message from UI
                    $(`#message-${messageId}`).remove();
                });
            }
        });

        // Update your loadMessages function to include message IDs and delete buttons
        function loadMessages(senderId, receiverId, groupId) {
            $('#chatBox').html('');
            $.get(`/Chat/GetMessages?senderId=${senderId}&receiverId=${receiverId}&groupId=${groupId}`, function (data) {
                data.forEach(msg => {
                    $('#chatBox').append(
                        `<div id="message-${msg.messageId}" class="message-container">
                            <b>${msg.senderName}:</b> ${msg.messageText}
                        </div>`
                    );
                });
                addDeleteButtons(data);
            });
        }
    </script>

}